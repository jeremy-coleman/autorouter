{"version":3,"sources":["../src/autorouter.js"],"names":[],"mappings":";;;;;;AAAA,IAAM,KAAK,QAAQ,IAAR,CAAX;AACA,IAAM,OAAO,QAAQ,MAAR,CAAb;AACA,IAAM,UAAU,QAAQ,SAAR,CAAhB;;AAEA,IAAM,UAAU,SAAV,OAAU,CAAC,EAAD;AAAA,WAAQ,GAAG,KAAH,CAAS,qBAAT,CAAR;AAAA,CAAhB;;IAEM,U;AACF,wBAAY,OAAZ,EAAqB;AAAA;;AACjB,aAAK,GAAL,GAAW,EAAX;AACA,aAAK,IAAL,GAAY,QAAZ;AACA,aAAK,KAAL,GAAa,GAAb;AACA,aAAK,KAAL,GAAa,KAAb;;AAEA,aAAK,MAAL,GAAc,QAAQ,MAAR,EAAd;;AAEA,YAAI,OAAJ,EAAa;AACT,gBAAI,QAAQ,IAAZ,EAAkB,KAAK,IAAL,GAAY,QAAQ,IAApB;AAClB,gBAAI,QAAQ,KAAZ,EAAmB,KAAK,KAAL,GAAa,QAAQ,KAArB;AACnB,gBAAI,QAAQ,KAAZ,EAAmB,KAAK,KAAL,GAAa,IAAb;AACtB;;AAED,aAAK,KAAL,CAAW,KAAK,IAAhB,EAAsB,KAAK,KAA3B;AACH;;;;8BAEK,I,EAAM,K,EAAO;AAAA;;AACf,gBAAM,QAAQ,GAAG,WAAH,CAAe,KAAK,IAAL,CAAU,QAAQ,GAAR,EAAV,EAAyB,IAAzB,CAAf,CAAd;AACA,kBAAM,GAAN,CAAU,UAAC,EAAD,EAAQ;AACd,oBAAM,OAAO,QAAQ,EAAR,CAAb;AACA,oBAAI,CAAC,KAAK,CAAL,CAAL,EAAc,OAAO,MAAK,KAAL,CAAW,KAAK,IAAL,CAAU,IAAV,EAAgB,KAAK,CAAL,CAAhB,CAAX,EAAqC,QAAQ,GAAR,GAAc,KAAK,CAAL,CAAnD,CAAP;;AAEd,oBAAM,OAAO,KAAK,CAAL,MAAY,OAAZ,GAAsB,EAAtB,GAA2B,KAAK,CAAL,CAAxC;AACA,oBAAM,WAAW,QAAQ,GAAR,GAAc,IAA/B;AACA,oBAAM,SAAS,QAAQ,KAAK,IAAL,CAAU,QAAQ,GAAR,EAAV,EAAyB,IAAzB,EAA+B,IAA/B,CAAR,CAAf;;AAEA,oBAAI,MAAK,GAAL,CAAS,QAAT,CAAJ,EAAwB;AACpB,wBAAM,qBAAmB,QAAnB,kCAAN;;AAEA,wBAAI,MAAK,KAAT,EAAgB,QAAQ,IAAR,CAAa,OAAb,EAAhB,KACK,MAAM,IAAI,KAAJ,CAAU,OAAV,CAAN;AACR;;AAED,sBAAK,GAAL,CAAS,QAAT,IAAqB,MAArB;AACA,sBAAK,MAAL,CAAY,GAAZ,CAAgB,QAAhB,EAA0B,MAA1B;AACH,aAjBD;AAkBH;;;;;;AAGL,OAAO,OAAP,GAAiB,UAAC,OAAD;AAAA,WAAa,IAAI,UAAJ,CAAe,OAAf,CAAb;AAAA,CAAjB","file":"autorouter.js","sourcesContent":["const fs = require(\"fs\");\nconst path = require(\"path\");\nconst express = require(\"express\");\n\nconst getName = (fn) => fn.match(/^(.+?)(\\.(js|ts)|)$/);\n\nclass AutoRouter {\n    constructor(options) {\n        this.map = {};\n        this.base = \"routes\";\n        this.entry = \"/\";\n        this.force = false;\n\n        this.router = express.Router();\n\n        if (options) {\n            if (options.base) this.base = options.base;\n            if (options.entry) this.entry = options.entry;\n            if (options.force) this.force = true;\n        }\n\n        this.route(this.base, this.entry);\n    }\n\n    route(base, entry) {\n        const files = fs.readdirSync(path.join(process.cwd(), base));\n        files.map((fn) => {\n            const file = getName(fn);\n            if (!file[2]) return this.route(path.join(base, file[1]), entry + \"/\" + file[1]);\n\n            const name = file[1] === \"index\" ? \"\" : file[1];\n            const newEntry = entry + \"/\" + name;\n            const router = require(path.join(process.cwd(), base, name));\n\n            if (this.map[newEntry]) {\n                const message = `Entry ${newEntry} is added more than one time.`;\n\n                if (this.force) console.warn(message);\n                else throw new Error(message);\n            }\n\n            this.map[newEntry] = router;\n            this.router.use(newEntry, router);\n        });\n    }\n}\n\nmodule.exports = (options) => new AutoRouter(options);\n"]}